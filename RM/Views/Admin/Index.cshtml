@using PagedList;
@using PagedList.Mvc;
@using RM.Models;
@model Inventory

@{
    ViewBag.PageName = "Manage Inventory";
}
<link href="~/Scripts/jquery-ui-1.10.4.custom.min.css" rel="stylesheet" />
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery-1.10.2.js"></script>
<script src="~/Scripts/jquery-ui-1.10.4.custom.min.js"></script>

<script type="text/javascript">
    $m = jQuery.noConflict();
    $(function () {
        $('.edit-mode').hide();
        $('.edit-Inventory, .cancel-Inventory').on('click', function () {
            var tr = $(this).parents('tr:first');
            tr.find('.edit-mode, .display-mode').toggle();
        });
        $('.save-Inventory').on('click', function () {
            var tr = $(this).parents('tr:first');
            var id = tr.attr('id');
            var Loc = tr.find("#item_Loc").val();
            var Type = tr.find("#item_Type").val();
            var Finish = tr.find("#item_Finish").val();
            var Gauge = tr.find("#item_Gauge").val();
            var Width = tr.find('#item_Width').val();
            var WTNET = tr.find('#item_WTNET').val();
            var NOOFPCS = tr.find('#item_NOOFPCS').val();
            document.getElementById('L_' + id).innerHTML = Loc;
            document.getElementById('T_' + id).innerHTML = Type;
            document.getElementById('F_' + id).innerHTML = Finish;
            document.getElementById('G_' + id).innerHTML = Gauge;
            document.getElementById('W_' + id).innerHTML = Width;
            document.getElementById('WT_' + id).innerHTML = WTNET;
            document.getElementById('N_' + id).innerHTML = NOOFPCS;
            tr.find('.edit-mode, .display-mode').toggle();
            var Inventory =
              {
                  "Id": id,
                  "Loc": Loc,
                  "Type": Type,
                  "Finish": Finish,
                  "Gauge": Gauge,
                  "Width": Width,
                  "WTNET": WTNET,
                  "NOOFPCS": NOOFPCS
              };
            $.ajax({
                url: '/Admin/Update/',
                data: JSON.stringify(Inventory),
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                }
            });

        });
        $('.delete-Inventory').on('click', function () {
            if (!confirm('Are you sure you want to delete this record?'))
            { return; }
            var tr = $(this).parents('tr:first');
            var id = tr.attr('id')
            var Inventory =
               {
                   "Id": id
               };
            $.ajax({
                url: '/Admin/Delete/',
                data: JSON.stringify(Inventory),
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    document.getElementById(id).style.display = 'none';
                }
            });
        });
    })
</script>

<script type="text/javascript">
    $m(document).ready(function () {
        $('#Pages').change(function () {

            val = $(this).val();
            if (val == 100) {

                window.location.href = '@Html.Raw(@Url.Action("index", "Admin", new { Pages = 100,
                                       Loc = Model.Loc,
                                       Type = Model.Type,
                                       Finish = Model.Finish,
                                       Gauge = Model.Gauge,
                                       Width = Model.Width,
                                       WTNET = Model.WTNET
                                   }))'

            }
            else if (val == 150) {

                window.location.href = '@Html.Raw(@Url.Action("index", "Admin", new
                                   {
                                       Pages = 150,
                                       Loc = Model.Loc,
                                       Type = Model.Type,
                                       Finish = Model.Finish,
                                       Gauge = Model.Gauge,
                                       Width = Model.Width,
                                       WTNET = Model.WTNET
                                   }))'

            }
            else {
                window.location.href = '@Html.Raw(@Url.Action("index", "Admin", new
                                   {
                                       Pages = 50,
                                       Loc = Model.Loc,
                                       Type = Model.Type,
                                       Finish = Model.Finish,
                                       Gauge = Model.Gauge,
                                       Width = Model.Width,
                                       WTNET = Model.WTNET
                                   }))'
            }

        });
    });
</script>



<div class="col-md-12 col-sm-6 aboutus wow fadeInLeft animated">
    <div class="bs-example" data-example-id="striped-table">
        <div class="table-responsive">
            <h2 class="wellcome">Inventory</h2>

            @Html.ActionLink("Export To Excel", "Index", new
       {
           Export = 1,
           Loc = Model.Loc,
           Type = Model.Type,
           Finish = Model.Finish,
           Gauge = Model.Gauge,
           Width = Model.Width,
           WTNET = Model.WTNET,
           Pages = Request.QueryString["Pages"],
           sortOrder = Request["sortOrder"]
       }, new { })  @* The Style should be added here to move it right *@

    @if (Model != null)
    {
        @Html.PagedListPager(Model.IPagedProductsList, page => Url.Action("Index", new
           {
               page,
               Loc = Model.Loc,
               Type = Model.Type,
               Finish = Model.Finish,
               Gauge = Model.Gauge,
               Width = Model.Width,
               WTNET = Model.WTNET,
               Pages = Request.QueryString["Pages"],
               sortOrder = Request["sortOrder"]
           }),
            new PagedListRenderOptions() { Display = PagedListDisplayMode.IfNeeded })

    }


    <table class="table table-bordered table-hover">
        <thead style="background-color:white;border:none">
            @using (Html.BeginForm("Index", "Admin", new { Pages = ViewBag.Pages }, FormMethod.Post))
            {
                <tr>
                    <th>
                        @Html.DropDownListFor(model => model.Loc, Model.GetLocation(), "Location", new { @class = "form-control" })
                    </th>

                    <th>
                        @Html.DropDownListFor(model => model.Type, Model.GetType(), "Type", new { @class = "form-control" })
                    <th>
                        @Html.DropDownListFor(model => model.Finish, Model.GetFinish(), "Finish", new { @class = "form-control", style = "width: 100px;" })
                    </th>
                    <th>
                        @Html.DropDownListFor(model => model.Gauge, Model.GetGauge(), "Gauge", new { @class = "form-control" })
                    </th>
                    <th>
                        @Html.DropDownListFor(model => model.Width, Model.GetWidth(), "Width", new { @class = "form-control" })
                    </th>
                    <th>
                        @Html.DropDownListFor(model => model.WTNET, Model.GetWTNET(), "Net Wt", new { @class = "form-control" })
                    </th>
                    <th>
                        @Html.DropDownList("Pages", ViewBag.ListItems as IEnumerable<SelectListItem>, new { @class = "form-control" })
                    </th>
                    <th>
                        <input type="submit" name="submit" value="search" class="btn btn-default signin" />
                    </th>                    
                </tr>
            }
        </thead>
        <tr style="border:none;">
            <td colspan="9" style="border:none;"></td>
        </tr>
        @if (Model.ProductList.Count > 0)
        {
            <thead>
                <tr>

                    <th>
                        @Html.ActionLink("Location", "Index", new
                       {
                           Pages = ViewBag.Pages,
                           sortOrder = ViewBag.LocSortParm,
                           Loc = Model.Loc,
                           Type = Model.Type,
                           Finish = Model.Finish,
                           Gauge = Model.Gauge,
                           Width = Model.Width,
                           WTNET = Model.WTNET
                       }, new { style = "color:white" })
                    </th>
                    <th>
                        @Html.ActionLink("Type", "Index", new
                       {
                           Pages = ViewBag.Pages,
                           sortOrder = ViewBag.TypeSortParm,
                           Loc = Model.Loc,
                           Type = Model.Type,
                           Finish = Model.Finish,
                           Gauge = Model.Gauge,
                           Width = Model.Width,
                           WTNET = Model.WTNET
                       }, new { style = "color:white" })
                    </th>
                    <th>
                        @Html.ActionLink("Finish", "Index", new
                       {
                           Pages = ViewBag.Pages,
                           sortOrder = ViewBag.FinishSortParm,
                           Loc = Model.Loc,
                           Type = Model.Type,
                           Finish = Model.Finish,
                           Gauge = Model.Gauge,
                           Width = Model.Width,
                           WTNET = Model.WTNET
                       }, new { style = "color:white" })
                    </th>
                    <th>
                        @Html.ActionLink("Gauge", "Index", new
                       {
                           Pages = ViewBag.Pages,
                           sortOrder = ViewBag.GaugeSortParm,
                           Loc = Model.Loc,
                           Type = Model.Type,
                           Finish = Model.Finish,
                           Gauge = Model.Gauge,
                           Width = Model.Width,
                           WTNET = Model.WTNET
                       }, new { style = "color:white" })
                    </th>
                    <th>
                        @Html.ActionLink("Width", "Index", new
                       {
                           Pages = ViewBag.Pages,
                           sortOrder = ViewBag.WidthSortParm,
                           Loc = Model.Loc,
                           Type = Model.Type,
                           Finish = Model.Finish,
                           Gauge = Model.Gauge,
                           Width = Model.Width,
                           WTNET = Model.WTNET
                       }, new { style = "color:white" })
                    </th>
                    <th>
                        @Html.ActionLink("Net Wt", "Index", new
                       {
                           Pages = ViewBag.Pages,
                           sortOrder = ViewBag.WTNETSortParm,
                           Loc = Model.Loc,
                           Type = Model.Type,
                           Finish = Model.Finish,
                           Gauge = Model.Gauge,
                           Width = Model.Width,
                           WTNET = Model.WTNET
                       }, new { style = "color:white" })
                    </th>
                    <th>
                        @Html.ActionLink("Pieces", "Index", new
                       {
                           Pages = ViewBag.Pages,
                           sortOrder = ViewBag.NOOFPCSSortParm,
                           Loc = Model.Loc,
                           Type = Model.Type,
                           Finish = Model.Finish,
                           Gauge = Model.Gauge,
                           Width = Model.Width,
                           WTNET = Model.WTNET
                       }, new { style = "color:white" })
                    </th>
                    @if (User.Identity.IsAuthenticated)
                    {                        
                        <th>

                        </th>
                    }
                </tr>
            </thead>
        }
        @if (Model != null)
        {
            foreach (var item in Model.IPagedProductsList)
            {
                <tbody>
                    <tr id=@item.Id>
                        <td style="width:50px">
                            <span class="display-mode" id="L_@item.Id" style="width:50px">
                                @Html.DisplayFor(modelItem => item.Loc)
                            </span>
                            @Html.TextBoxFor(modelItem => item.Loc, new { @class = "edit-mode", style = "width:50px" })
                        </td>
                        <td>
                            <span class="display-mode" style="width:50px" id="T_@item.Id">
                                @Html.DisplayFor(modelItem => item.Type)
                            </span>
                            @Html.TextBoxFor(m => item.Type, new { @class = "edit-mode", style = "width:75px" })

                        </td>
                        <td>
                            <span class="display-mode" style="width:50px" id="F_@item.Id">
                                @Html.DisplayFor(m => item.Finish)
                            </span>
                            @Html.TextBoxFor(m => item.Finish, new { @class = "edit-mode", style = "width:50px" })
                        </td>
                        <td>
                            <span class="display-mode" style="width:50px" id="G_@item.Id">
                                @Html.DisplayFor(m => item.Gauge)
                            </span>
                            @Html.TextBoxFor(m => item.Gauge, new { @class = "edit-mode", style = "width:50px" })
                        </td>
                        <td>
                            <span class="display-mode" style="width:50px" id="W_@item.Id">
                                @Html.DisplayFor(m => item.Width)
                            </span>
                            @Html.TextBoxFor(m => item.Width, new { @class = "edit-mode", style = "width:50px" })
                        </td>
                        <td>
                            <span class="display-mode" style="width:50px" id="WT_@item.Id">
                                @Html.DisplayFor(m => item.WTNET)
                            </span>
                            @Html.TextBoxFor(m => item.WTNET, new { @class = "edit-mode", style = "width:50px" })
                        </td>
                        <td>
                            <span class="display-mode" style="width:50px" id="N_@item.Id">
                                @Html.DisplayFor(modelItem => item.NOOFPCS)
                            </span>
                            @Html.TextBoxFor(m => item.NOOFPCS, new { @class = "edit-mode", style = "width:50px" })
                        </td>
                        @if (User.Identity.IsAuthenticated)
                        {                           
                            <td>
                                <button class="edit-Inventory display-mode">  Edit</button>
                                <button class="delete-Inventory display-mode"> Delete</button>
                                <button class="save-Inventory edit-mode">  Save</button>
                                <button class="cancel-Inventory edit-mode"> Cancel</button>
                            </td>
                        }

                    </tr>
                </tbody>
            }
        }

    </table>


    @if (Model != null)
    {
        @Html.PagedListPager(Model.IPagedProductsList, page => Url.Action("Index", new
           {
               page,
               Loc = Model.Loc,
               Type = Model.Type,
               Finish = Model.Finish,
               Gauge = Model.Gauge,
               Width = Model.Width,
               WTNET = Model.WTNET,
               Pages = Request.QueryString["Pages"],
               sortOrder = Request["sortOrder"]
           }),
            new PagedListRenderOptions() { Display = PagedListDisplayMode.IfNeeded })

    }

</div>
</div>
</div>
