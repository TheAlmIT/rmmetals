@using PagedList;
@using PagedList.Mvc;
@using RM.Models;
@model Inventory

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.PageName = "Inventory";
}
<link href="@Url.Content("~/Scripts/jquery-ui-1.10.4.custom.min.css")" rel="stylesheet" />
   


<link href="@Url.Content("~/css/jquery.multiselect.css")" rel="stylesheet" />

<link href="@Url.Content("~/css/select2.min.css")" rel="stylesheet" />

<script src="@Url.Content("~/Scripts/jquery-1.10.2.min.js")"></script>
<script src="@Url.Content("~/Scripts/jquery-1.10.2.js")"></script>
<script src="@Url.Content("~/Scripts/jquery-ui-1.10.4.custom.min.js")"></script>



@*<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<link href="http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.0.3/css/bootstrap.min.css"
      rel="stylesheet" type="text/css" />
<script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.0.3/js/bootstrap.min.js"></script>
<link href="http://cdn.rawgit.com/davidstutz/bootstrap-multiselect/master/dist/css/bootstrap-multiselect.css" rel="stylesheet" type="text/css" />
<script src="http://cdn.rawgit.com/davidstutz/bootstrap-multiselect/master/dist/js/bootstrap-multiselect.js" type="text/javascript"></script>*@

<link href="~/css/jquery.multiselect.css" rel="stylesheet" />

<script src="@Url.Content("~/js/jquery.multiselect.js")"></script>
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<link href="http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.0.3/css/bootstrap.min.css"
      rel="stylesheet" type="text/css" />
<link href="~/css/prettify.css" rel="stylesheet" />
<link href="~/css/Style1.css" rel="stylesheet" />
<script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.0.3/js/bootstrap.min.js"></script>
<link href="http://cdn.rawgit.com/davidstutz/bootstrap-multiselect/master/dist/css/bootstrap-multiselect.css" rel="stylesheet" type="text/css" />
<script src="http://cdn.rawgit.com/davidstutz/bootstrap-multiselect/master/dist/js/bootstrap-multiselect.js" type="text/javascript"></script>

<script src="~/js/prettify.js"></script>
<link rel="stylesheet" href="~/css/style.css">
<style>
 body{
         background: rgb(180, 180, 180); 
 }  
    .navbar-nav {
     margin-top: 47px; 
}
    .menunav
    {
        margin-right:5px;
    }
    ul.ui-multiselect-checkboxes.ui-helper-reset{
        width:100px;
        height:170px !important;
        position:absolute;
    }
</style>

<script type="text/javascript">
    $m = jQuery.noConflict();
    $(function () {
        $('.edit-mode').hide();
        $('.edit-Inventory, .cancel-Inventory').on('click', function () {
            var tr = $(this).parents('tr:first');
            tr.find('.edit-mode, .display-mode').toggle();
        });
        $('.save-Inventory').on('click', function () {
            var tr = $(this).parents('tr:first');
            var id = tr.attr('id');
            var Loc = tr.find("#item_Loc").val();
            var Loc = tr.find("#item_Item").val();
            var Type = tr.find("#item_Type").val();
            var Finish = tr.find("#item_Finish").val();
            var Finish = tr.find("#item_Thickness").val();
            var Gauge = tr.find("#item_Gauge").val();
            var Width = tr.find('#item_Width').val();
            var WTNET = tr.find('#item_WTNET').val();
            //var NOOFPCS = tr.find('#item_NOOFPCS').val();
            document.getElementById('L_' + id).innerHTML = Loc;
            document.getElementById('I_' + id).innerHTML = Item;
            document.getElementById('T_' + id).innerHTML = Type;
            document.getElementById('F_' + id).innerHTML = Finish;
            document.getElementById('TH_' + id).innerHTML = Thickness;
            document.getElementById('G_' + id).innerHTML = Gauge;
            document.getElementById('W_' + id).innerHTML = Width;
            document.getElementById('WT_' + id).innerHTML = WTNET;
            //document.getElementById('N_' + id).innerHTML = NOOFPCS;
            tr.find('.edit-mode, .display-mode').toggle();
            var Inventory =
              {
                  "Id": id,
                  "Loc": Loc,
                  "Item": Item,
                  "Type": Type,
                  "Finish": Finish,
                  "Thickness": Thickness,
                  "Gauge": Gauge,
                  "Width": Width,
                  "WTNET": WTNET//,
                  //"NOOFPCS": NOOFPCS
              };
            $.ajax({
                url: '/Inventory/Update/',
                data: JSON.stringify(Inventory),
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                }
            });

        });
        $('.delete-Inventory').on('click', function () {
            if (!confirm('Are you sure you want to delete this record?'))
            { return;}
            var tr = $(this).parents('tr:first');
            var id = tr.attr('id')
            var Inventory =
               {
                   "Id": id
               };
            $.ajax({
                url: '/Inventory/Delete/',
                data: JSON.stringify(Inventory),
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    document.getElementById(id).style.display = 'none';
                }
            });
        });


        //clsRqid

        $('#btnRequestQuoteHeader').on('click', function () {

            //alert(1);
            //true condition
            var rqids = new Array();
            $('#tableInventory tr ').find('.clsRqid:checked').each(function () {
                rqids.push($(this).attr("rqid"));
            });

            if(rqids.length <= 0)
            {
                alert("No reqest Quotes are selected");
                return;
            }
            else {
                //if (!confirm('Do you want to Request quote?'))
               // { return; }

               // alert("ajax call started");
                $.ajax({
                    url: '/Inventory/BulkRequestQuote/',
                    data: JSON.stringify(rqids),
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {
                        alert("Sending Your Inquiry to RM. Metals");
                        $("#btnSearch").click();
                    }
                });
            }


        });
        $('#btnExport').on('click', function () {
            var jModel = @Html.Raw(Json.Encode(Model));
            $.ajax({
                url: '/Inventory/ExporttoExcel/',
                data: JSON.stringify(  Locs = jModel.Locs,
                                       Items = jModel.Items,
                                       Types = jModel.Types,
                                       Finishs = jModel.Finishs,
                                       Thicknesss = jModel.Thicknesss,
                                       Gauges = jModel.Gauges,
                                       Widths = jModel.Widths,
                                       WTNETs = jModel.WTNETs),
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    alert(data);
                    //$("#btnSearch").click();
                }
            });
        });
        //
    })
</script>

<script type="text/javascript">
    $m(document).ready(function () {
        $('#Pages').change(function () {

            val = $(this).val();
            if (val == 100) {

                window.location.href = '@Html.Raw(@Url.Action("index", "Inventory", new { Pages = 100,
                                       Loc = Model.Loc,
                                       Item = Model.Item,
                                       Type = Model.Type,
                                       Finish = Model.Finish,
                                       Thickness = Model.Thickness,
                                       Gauge = Model.Gauge,
                                       Width = Model.Width,
                                       WTNET = Model.WTNET
                                   }))'

            }
            else if (val == 150) {

                window.location.href = '@Html.Raw(@Url.Action("index", "Inventory", new { Pages = 150,
                                       Loc = Model.Loc,
                                       Item = Model.Item,
                                       Type = Model.Type,
                                       Finish = Model.Finish,
                                       Thickness = Model.Thickness,
                                       Gauge = Model.Gauge,
                                       Width = Model.Width,
                                       WTNET = Model.WTNET
                                   }))'
      }
      else {
      window.location.href='@Html.Raw(@Url.Action("index", "Inventory", new { Pages = 50,
                                       Loc = Model.Loc,
                                       Item = Model.Item,
                                       Type = Model.Type,
                                       Finish = Model.Finish,
                                       Thickness = Model.Thickness,
                                       Gauge = Model.Gauge,
                                       Width = Model.Width,
                                       WTNET = Model.WTNET
                                   }))'
      }
      });
    });
</script>



<div class="col-md-12 col-sm-6 aboutus wow fadeInLeft animated" style="background: rgb(221, 221, 221)">
    <div class="bs-example" data-example-id="striped-table">
        <div class="table-responsive">
            <h2 class="wellcome" style="font-weight:bold">INVENTORY</h2>
           
                    @Html.ActionLink("Export To Excel", "ExporttoExcel", new
       {
           Export = 1,
           Locs = Html.Raw(Json.Encode(Model.Locs)),
           Items = Html.Raw(Json.Encode(Model.Items)),
           Types = Html.Raw(Json.Encode(Model.Types)),
           Finishs = Html.Raw(Json.Encode(Model.Finishs)),
           Thicknesss = Html.Raw(Json.Encode(Model.Thicknesss)),
           Gauges = Html.Raw(Json.Encode(Model.Gauges)),
           Widths = Html.Raw(Json.Encode(Model.Widths)),
           WTNETs = Html.Raw(Json.Encode(Model.WTNETs)),
           Pages = Request.QueryString["Pages"],
           sortOrder = Request["sortOrder"]
       }, new { @style = "color:#0B4376" })  @* The Style should be added here to move it right *@


        @if (Model != null)
        {
            @Html.PagedListPager(Model.IPagedProductsList, page => Url.Action("Index", new
           {
               page,
               Locs = Html.Raw(Json.Encode(Model.Locs)),
               Items = Html.Raw(Json.Encode(Model.Items)),
               Types = Html.Raw(Json.Encode(Model.Types)),
               Finishs = Html.Raw(Json.Encode(Model.Finishs)),
               Thicknesss = Html.Raw(Json.Encode(Model.Thicknesss)),
               Gauges = Html.Raw(Json.Encode(Model.Gauges)),
               Widths = Html.Raw(Json.Encode(Model.Widths)),
               WTNETs = Html.Raw(Json.Encode(Model.WTNETs)),
               Pages = Request.QueryString["Pages"],
               sortOrder = Request["sortOrder"]
               //Loc = Model.Loc,
               //Item = Model.Item,
               //Type = Model.Type,
               //Finish = Model.Finish,
               //Thickness = Model.Thickness,
               //Gauge = Model.Gauge,
               //Width = Model.Width,
               //WTNET = Model.WTNET,
               //Pages = Request.QueryString["Pages"],
               //sortOrder = Request["sortOrder"]
           }),
            new PagedListRenderOptions() { Display = PagedListDisplayMode.IfNeeded })

        }
        @*<style>
        #tableInventory {
            overflow-x:scroll;
        }
    </style>*@
       
            <button id="btnClearMultiSelects" type="button" class="btn btn-primary btn-sm signin pull-right ">CLEAR</button>
               <style>
                   #searchhaeder span {
                   font-weight:bold;
                   }
               </style>
            <table class="table table-bordered table-hover" id="tableInventory" style="font-weight:bold;position:relative;left:-9px;">
                <thead style="background-color:#f7941d;color:white;border:none;overflow-x:scroll;">
                    @using (Html.BeginForm("Index", "Inventory", new { Pages = ViewBag.Pages }, FormMethod.Post))
                    {

                        <tr id="searchhaeder">
                            <th>

                                @*<p style="color:white;">LOCATION

                            </p>*@

                                @Html.ListBoxFor(model => model.Locs, Model.GetLocation(), new { @class = "form-control listbox", @multiple = "multiple" })
                            </th>
                            <th>
                                @*<p style="color:white;">ITEM</p>*@
                                @Html.ListBoxFor(model => model.Items, Model.GetItem(), new { @class = "form-control listbox", @multiple = "multiple",style = "height: 120px;" })
                            </th>
                            <th>
                                @*<p style="color:white;">TYPE</p>*@
                                @Html.ListBoxFor(model => model.Types, Model.GetType(), new { @class = "form-control  listbox", @multiple = "multiple" })
                            </th>
                            <th>
                                @*<p style="color:white;">FINISH</p>*@
                                @Html.ListBoxFor(model => model.Finishs, Model.GetFinish(), new { @class = "form-control  listbox", @multiple = "multiple", style = "width: 100px;" })
                            </th>
                            <th>
                                @*<p style="color:white;">THICKNESS</p>*@
                                @Html.ListBoxFor(model => model.Thicknesss, Model.GetThickness(), new { @class = "form-control  listbox", @multiple = "multiple", style = "width: 100px;" })
                            </th>
                            <th>
                                @*<p style="color:white;">GAUGE</p>*@
                                @Html.ListBoxFor(model => model.Gauges, Model.GetGauge(), new { @class = "form-control  listbox", @multiple = "multiple" })
                            </th>
                            <th>
                                @*<p style="color:white;">WIDTH</p>*@
                                @Html.ListBoxFor(model => model.Widths, Model.GetWidth(), new { @class = "form-control  listbox", @multiple = "multiple" })
                            </th>
                            <th>
                                @*<p style="color:white;">NET WT</p>*@
                                @Html.ListBoxFor(model => model.WTNETs, Model.GetWTNET(), new { @class = " listbox", @multiple = "multiple" })
                            </th>
                            <th>
                                @*<p style="color:white;">PAGES</p>*@
                                @Html.DropDownList("Pages", ViewBag.ListItems as IEnumerable<SelectListItem>, new { @class = "ui-widget ui-state-default ui-corner-all", @style = " font-weight:bold; font-size: 13px; height: 23px;" })
                            </th>
                            <th style="width:100px;">
                                <input type="submit" id="btnSearch" name="submit" value="SEARCH" class="btn btn-primary btn-sm signin" />
                            </th>

                        </tr>
                    }
                </thead>
                <tr style="border:none;">
                    <td colspan="9" style="border:none;"></td>
                </tr>
                @if (Model.ProductList.Count > 0)
                {
                    <thead>
                        <tr>

                            <th>
                                @Html.ActionLink("LOCATION", "Index", new
                       {
                           Pages = ViewBag.Pages,
                           sortOrder = ViewBag.LocSortParm,
                           Loc = Model.Loc,
                           Item = Model.Item,
                           Type = Model.Type,
                           Finish = Model.Finish,
                           Thickness = Model.Thickness,
                           Gauge = Model.Gauge,
                           Width = Model.Width,
                           WTNET = Model.WTNET
                       }, new { style = "color:white" })
                            </th>
                            <th>
                                @Html.ActionLink("ITEM", "Index", new
                       {
                           Pages = ViewBag.Pages,
                           sortOrder = ViewBag.LocSortParm,
                           Loc = Model.Loc,
                           Item = Model.Item,
                           Type = Model.Type,
                           Finish = Model.Finish,
                           Thickness = Model.Thickness,
                           Gauge = Model.Gauge,
                           Width = Model.Width,
                           WTNET = Model.WTNET
                       }, new { style = "color:white" })
                            </th>
                            <th>
                                @Html.ActionLink("TYPE", "Index", new
                       {
                           Pages = ViewBag.Pages,
                           sortOrder = ViewBag.TypeSortParm,
                           Loc = Model.Loc,
                           Item = Model.Item,
                           Type = Model.Type,
                           Finish = Model.Finish,
                           Thickness = Model.Thickness,
                           Gauge = Model.Gauge,
                           Width = Model.Width,
                           WTNET = Model.WTNET
                       }, new { style = "color:white" })
                            </th>
                            <th>
                                @Html.ActionLink("FINISH", "Index", new
                       {
                           Pages = ViewBag.Pages,
                           sortOrder = ViewBag.FinishSortParm,
                           Loc = Model.Loc,
                           Item = Model.Item,
                           Type = Model.Type,
                           Finish = Model.Finish,
                           Thickness = Model.Thickness,
                           Gauge = Model.Gauge,
                           Width = Model.Width,
                           WTNET = Model.WTNET
                       }, new { style = "color:white" })
                            </th>
                            <th>
                                @Html.ActionLink("THICKNESS", "Index", new
                       {
                           Pages = ViewBag.Pages,
                           sortOrder = ViewBag.LocSortParm,
                           Loc = Model.Loc,
                           Item = Model.Item,
                           Type = Model.Type,
                           Finish = Model.Finish,
                           Thickness = Model.Thickness,
                           Gauge = Model.Gauge,
                           Width = Model.Width,
                           WTNET = Model.WTNET
                       }, new { style = "color:white" })
                            </th>
                            <th>
                                @Html.ActionLink("GAUGE", "Index", new
                       {
                           Pages = ViewBag.Pages,
                           sortOrder = ViewBag.GaugeSortParm,
                           Loc = Model.Loc,
                           Item = Model.Item,
                           Type = Model.Type,
                           Finish = Model.Finish,
                           Thickness = Model.Thickness,
                           Gauge = Model.Gauge,
                           Width = Model.Width,
                           WTNET = Model.WTNET
                       }, new { style = "color:white" })
                            </th>
                            <th>
                                @Html.ActionLink("WIDTH", "Index", new
                       {
                           Pages = ViewBag.Pages,
                           sortOrder = ViewBag.WidthSortParm,
                           Loc = Model.Loc,
                           Item = Model.Item,
                           Type = Model.Type,
                           Finish = Model.Finish,
                           Thickness = Model.Thickness,
                           Gauge = Model.Gauge,
                           Width = Model.Width,
                           WTNET = Model.WTNET
                       }, new { style = "color:white" })
                            </th>
                            <th>
                                @Html.ActionLink("NET WT", "Index", new
                       {
                           Pages = ViewBag.Pages,
                           sortOrder = ViewBag.WTNETSortParm,
                           Loc = Model.Loc,
                           Item = Model.Item,
                           Type = Model.Type,
                           Finish = Model.Finish,
                           Thickness = Model.Thickness,
                           Gauge = Model.Gauge,
                           Width = Model.Width,
                           WTNET = Model.WTNET
                       }, new { style = "color:white" })
                            </th>
                            @*<th>
                                 @Html.ActionLink("Pieces", "Index", new
                        {
                            Pages = ViewBag.Pages,
                            sortOrder = ViewBag.NOOFPCSSortParm,
                            Loc = Model.Loc,
                            Item = Model.Item,
                            Type = Model.Type,
                            Finish = Model.Finish,
                            Thickness = Model.Thickness,
                            Gauge = Model.Gauge,
                            Width = Model.Width,
                            WTNET = Model.WTNET
                        }, new { style = "color:white" })
                             </th>*@
                            @if (User.Identity.IsAuthenticated)
                            {
                                <th>

                                    <input type="button" value="REQUEST QUOTE" class="btn btn-success" style="border-radius:5px; font-size:11px; max-width:100px;word-wrap:break-word;white-space:normal !important;" id="btnRequestQuoteHeader" />
                                </th>
                            }
                        </tr>
                    </thead>
                }
                @if (Model != null)
                {
                    foreach (var item in Model.IPagedProductsList)
                    {
                        <tbody>
                            <tr id=@item.Id>
                                <td style="width:50px">
                                    <span class="display-mode" id="L_@item.Id" style="width:50px">
                                        @Html.DisplayFor(modelItem => item.Loc)
                                    </span>
                                    @Html.TextBoxFor(modelItem => item.Loc, new { @class = "edit-mode", style = "width:50px" })
                                </td>
                                <td style="width:50px">
                                    <span class="display-mode" id="I_@item.Id" style="width:50px">
                                        @Html.DisplayFor(modelItem => item.Item)
                                    </span>
                                    @Html.TextBoxFor(modelItem => item.Item, new { @class = "edit-mode", style = "width:50px" })
                                </td>
                                <td>
                                    <span class="display-mode" style="width:50px" id="T_@item.Id">
                                        @Html.DisplayFor(modelItem => item.Type)
                                    </span>
                                    @Html.TextBoxFor(m => item.Type, new { @class = "edit-mode", style = "width:75px" })

                                </td>
                                <td>
                                    <span class="display-mode" style="width:50px" id="F_@item.Id">
                                        @Html.DisplayFor(m => item.Finish)
                                    </span>
                                    @Html.TextBoxFor(m => item.Finish, new { @class = "edit-mode", style = "width:50px" })
                                </td>
                                <td>
                                    <span class="display-mode" style="width:50px" id="TH_@item.Id">
                                        @Html.DisplayFor(m => item.Thickness)
                                    </span>
                                    @Html.TextBoxFor(m => item.Thickness, new { @class = "edit-mode", style = "width:50px" })
                                </td>
                                <td>
                                    <span class="display-mode" style="width:50px" id="G_@item.Id">
                                        @Html.DisplayFor(m => item.Gauge)
                                    </span>
                                    @Html.TextBoxFor(m => item.Gauge, new { @class = "edit-mode", style = "width:50px" })
                                </td>
                                <td>
                                    <span class="display-mode" style="width:50px" id="W_@item.Id">
                                        @Html.DisplayFor(m => item.Width)
                                    </span>
                                    @Html.TextBoxFor(m => item.Width, new { @class = "edit-mode", style = "width:50px" })
                                </td>
                                <td>
                                    <span class="display-mode" style="width:50px" id="WT_@item.Id">
                                        @Html.DisplayFor(m => item.WTNET)
                                    </span>
                                    @Html.TextBoxFor(m => item.WTNET, new { @class = "edit-mode", style = "width:50px" })
                                </td>
                                @*<td>
                                <span class="display-mode" style="width:50px" id="N_@item.Id">
                                    @Html.DisplayFor(modelItem => item.NOOFPCS)
                                </span>
                                @Html.TextBoxFor(m => item.NOOFPCS, new { @class = "edit-mode", style = "width:50px" })
                            </td>*@
                                @if (User.Identity.IsAuthenticated)
                                {
                                    <td align="center">


                                        <input type="checkbox" style="width:20px;height:20px;" rqid="@item.Id.ToString()" class="clsRqid btn btn-default signin" />

                                        @*<input type="button" style="width:20px;height:20px;" value="Request quote" class="btn btn-default signin" id="btnRequestQuote" onclick="if (confirm('Do you want to Request quote?'))
                                                         { window.location.href='@Html.Raw(@Url.Action("index", "Inventory", new { Id = item.Id,
                                      Pages = Request.QueryString["Pages"],
                                    sortOrder = Request["sortOrder"],
                                     Loc = Model.Loc,
                                     Type = Model.Type,
                                     Finish = Model.Finish,
                                     Gauge = Model.Gauge,
                                     Width = Model.Width,
                                     WTNET = Model.WTNET }))' }" />*@

                                    </td>
                                }

                            </tr>
                        </tbody>
                    }
                }

            </table>
           


            @if (Model != null)
            {
                @Html.PagedListPager(Model.IPagedProductsList, page => Url.Action("Index", new
           {
               page,
               Locs = Html.Raw(Json.Encode(Model.Locs)),
               Items = Html.Raw(Json.Encode(Model.Items)),
               Types = Html.Raw(Json.Encode(Model.Types)),
               Finishs = Html.Raw(Json.Encode(Model.Finishs)),
               Thicknesss = Html.Raw(Json.Encode(Model.Thicknesss)),
               Gauges = Html.Raw(Json.Encode(Model.Gauges)),
               Widths = Html.Raw(Json.Encode(Model.Widths)),
               WTNETs = Html.Raw(Json.Encode(Model.WTNETs)),
               Pages = Request.QueryString["Pages"],
               sortOrder = Request["sortOrder"]
               //Loc = Model.Loc,
               //Item = Model.Item,
               //Type = Model.Type,
               //Finish = Model.Finish,
               //Thickness = Model.Thickness,
               //Gauge = Model.Gauge,
               //Width = Model.Width,
               //WTNET = Model.WTNET,
               //Pages = Request.QueryString["Pages"],
               //sortOrder = Request["sortOrder"]
           }),
            new PagedListRenderOptions() { Display = PagedListDisplayMode.IfNeeded })

            }

        </div>
    </div>
</div>


<script type="text/javascript">
    $(function () {
        //$('.listbox').multiselect({
        //    includeSelectAllOption: true,
        //    buttonWidth: '100px'
        //});

        $("#btnClearMultiSelects").click(function(){
            $("#Locs").multiselect('uncheckAll');
            $("#Items").multiselect('uncheckAll');
            $("#Types").multiselect('uncheckAll');
            $("#Finishs").multiselect('uncheckAll');
            $("#Thicknesss").multiselect('uncheckAll');
            $("#Gauges").multiselect('uncheckAll');
            $("#Widths").multiselect('uncheckAll');
            $("#WTNETs").multiselect('uncheckAll');
            $("#btnSearch").click();
        });

        $('#Locs').multiselect({
            noneSelectedText: "LOCATION" 
            
        });
        $("#btnLocClear").click(function(){
            $("#Locs").multiselect('uncheckAll');
        });
        $('#Locs_ms').css('width','104px');

      

        $('#Items').multiselect({
            noneSelectedText: "ITEM"   
        });
        $("#btnItemClear").click(function(){
            $("#Items").multiselect('uncheckAll');
        });
        $('#Items_ms').css('width','104px');
        //$('#Items_ms').text('Items');

        $('#Types').multiselect({
            noneSelectedText: "TYPE"   
        });
        $("#btnTypeClear").click(function(){
            $("#Types").multiselect('uncheckAll');
        });
        $('#Types_ms').css('width','104px');
        //$('#Types_ms').text('Types');

        $('#Finishs').multiselect({
            noneSelectedText: "FINISH"   
        });
        $("#btnFinishClear").click(function(){
            $("#Finishs").multiselect('uncheckAll');
        });
        $('#Finishs_ms').css('width','104px');
        //$('#Finishs_ms').text('Finishs');

        $('#Thicknesss').multiselect({
            noneSelectedText: "THICKNESS"   
        });
        $("#btnThicknessClear").click(function(){
            $("#Thicknesss").multiselect('uncheckAll');
        });
        $('#Thicknesss_ms').css('width','104px');
        //$('#Thicknesss_ms').text('Thicknesss');

        $('#Gauges').multiselect({
            noneSelectedText: "GAUGE"   
        });
        $("#btnGaugeClear").click(function(){
            $("#Gauges").multiselect('uncheckAll');
        });
        $('#Gauges_ms').css('width','104px');
        //$('#Gauges_ms').text('Gauges');

        $('#Widths').multiselect({
            noneSelectedText: "WIDTH"   
        });
        $("#btnWidthClear").click(function(){
            $("#Widths").multiselect('uncheckAll');
        });
        $('#Widths_ms').css('width','104px');
        //$('#Widths_ms').text('Widths');

        $('#WTNETs').multiselect({
            noneSelectedText: "NET WT"   
        });
        $("#btnWTNETClear").click(function(){
            $("#WTNETs").multiselect('uncheckAll');
        });
        $('#WTNETs_ms').css('width','104px');
        //$('#WTNETs_ms').text('WTNETs');
        
        //$('.ui-multiselect-header').css('display','none');
        $('.ui-multiselect-header').css('font-size','12px');
        $('.ui-multiselect-header').css('height','40px');
        $('.ui-multiselect-header').css('color','blue');
        $('.ui-multiselect').css('font-size','12px');


        $('.ui-multiselect-all').css('color','blue');
        //$(".ui-multiselect-menu").css('width','200px')

       
    });
</script>
<script>


    $(function () {
        var jsmodel = @Html.Raw(Json.Encode(Model));
        //$("#Locs option").each(function(){
        //    //alert($(this).text());
        //    for (var i = 0; i < jsmodel.Locs.length; i++) {
        //        //alert(jsmodel.Locs[i]);
           
        //        if(jsmodel.Locs[i] == $(this).text())
        //        {
        //            alert(1);
        //            $(this).attr('selected','selected');
        //        }
        //        //Do something
        //    }
            
 
        //});
        debugger;
       //$('#Locs').select2({ placeholder: "Locations" ,multiple:true});
       // $('#Items').select2({ placeholder: "Items" });
       // $('#Types').select2({ placeholder: "Types" });
       // $('#Finishs').select2({ placeholder: "Finishs" });
       // $('#Thicknesss').select2({ placeholder: "Thicknesss" });
       // $('#Gauges').select2({ placeholder: "Gauges" });
       // $('#Widths').select2({ placeholder: "Widths" });
       // $('#WTNETs').select2({ placeholder: "WTNETs" });


       // $('#Locs').val(jsmodel.Locs).trigger("change");
       // $('#Items').val(jsmodel.Items).trigger("change");
       // $('#Types').val(jsmodel.Types).trigger("change");
       // $('#Finishs').val(jsmodel.Finishs).trigger("change");
       // $('#Thicknesss').val(jsmodel.Thicknesss).trigger("change");
       // $('#Gauges').val(jsmodel.Gauges).trigger("change");
       // $('#Widths').val(jsmodel.Widths).trigger("change");
       // $('#WTNETs').val(jsmodel.WTNETs).trigger("change");


        //$("#btnSearchVisible").click(function () {
        //    //var Locs = "";
        //    //var v = $('#Loc').select2('data');
        //    //v.forEach(function (d) {
        //    //    Locs = Locs + "," + d.text;
        //    //});

        //    //debugger;
        //    //$("#Loc").val(Locs);
        //    $("#btnSearch").click();
        //});
    });

    </script>  
