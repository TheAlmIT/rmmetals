@using PagedList;
@using PagedList.Mvc;
@using RM.Models;

@model Products

@{
    ViewBag.Title = "Index";
}

@Scripts.Render("~/bundles/jquery")


<h2>Index</h2>

<script type="text/javascript">
    $(document).ready(function () {

        $('#Pages').change(function () {

            val = $(this).val();
            if (val == 20) {
                window.location.href = '@Html.Raw(@Url.Action("index", "Product",new { Pages = 20,
                                       Loc = Model.Loc,
                                       Type = Model.Type,
                                       Finish = Model.Finish,
                                       Gauge = Model.Gauge,
                                       Width = Model.Width,
                                       WTNET = Model.WTNET
                                   }))'

            }
            else if (val == 30) {

                window.location.href = '@Html.Raw(@Url.Action("index", "Product", new { Pages = 30,
                                       Loc = Model.Loc,
                                       Type = Model.Type,
                                       Finish = Model.Finish,
                                       Gauge = Model.Gauge,
                                       Width = Model.Width,
                                       WTNET = Model.WTNET
                                   }))'

            }
            else if (val == 40) {

                window.location.href = '@Html.Raw(@Url.Action("index", "Product", new { Pages = 40,
                                       Loc = Model.Loc,
                                       Type = Model.Type,
                                       Finish = Model.Finish,
                                       Gauge = Model.Gauge,
                                       Width = Model.Width,
                                       WTNET = Model.WTNET
                                   }))'

            }
            else {
                window.location.href = '@Html.Raw(@Url.Action("index", "Product", new { Pages = 10,
                                       Loc = Model.Loc,
                                       Type = Model.Type,
                                       Finish = Model.Finish,
                                       Gauge = Model.Gauge,
                                       Width = Model.Width,
                                       WTNET = Model.WTNET
                                   }))'
            }

        });
    });
</script>


<p>
    @Html.ActionLink("Create New", "Create")
</p>


<table class="table">

    @using (Html.BeginForm("Index", "Product", new { Pages = ViewBag.Pages }, FormMethod.Post))
    {
        <tr>
            <th>
                @Html.TextBoxFor(model => model.Loc, null, new { @placeholder = " Location", style = "width:80px" })
            </th>
            <th>
                @Html.TextBoxFor(model => model.Type, null, new { @placeholder = " Type", style = "width:80px" })
            </th>
            <th>
                @Html.TextBoxFor(model => model.Finish, null, new { @placeholder = " Finish ", style = "width:80px" })
            </th>
            <th>
                @Html.TextBoxFor(model => model.Gauge, null, new { @placeholder = " Gauge ", style = "width:80px" })
            </th>
            <th>
                @Html.TextBoxFor(model => model.Width, null, new { @placeholder = " Width ", style = "width:80px" })
            </th>
            <th>
                @Html.TextBoxFor(model => model.WTNET, null, new { @placeholder = " WTNET ", style = "width:80px" })
            </th>
            <th>
                <input type="submit" name="submit" value="search" />
            </th>
            <th>
                @Html.DropDownList("Pages", ViewBag.ListItems as IEnumerable<SelectListItem>)
            </th>

        </tr>
    }

    <tr>

        <th>
            @Html.ActionLink("Location", "Index", new
       {
           Pages = ViewBag.Pages,
           sortOrder = ViewBag.LocSortParm,
           Loc = Model.Loc,
           Type = Model.Type,
           Finish = Model.Finish,
           Gauge = Model.Gauge,
           Width = Model.Width,
           WTNET = Model.WTNET
       })
        </th>
        <th>
            @Html.ActionLink("Type", "Index", new
       {
           Pages = ViewBag.Pages,
           sortOrder = ViewBag.TypeSortParm,
           Loc = Model.Loc,
           Type = Model.Type,
           Finish = Model.Finish,
           Gauge = Model.Gauge,
           Width = Model.Width,
           WTNET = Model.WTNET
       })
        </th>
        <th>
            @Html.ActionLink("Finish", "Index", new
       {
           Pages = ViewBag.Pages,
           sortOrder = ViewBag.FinishSortParm,
           Loc = Model.Loc,
           Type = Model.Type,
           Finish = Model.Finish,
           Gauge = Model.Gauge,
           Width = Model.Width,
           WTNET = Model.WTNET
       })
        </th>
        <th>
            @Html.ActionLink("Gauge", "Index", new
       {
           Pages = ViewBag.Pages,
           sortOrder = ViewBag.GaugeSortParm,
           Loc = Model.Loc,
           Type = Model.Type,
           Finish = Model.Finish,
           Gauge = Model.Gauge,
           Width = Model.Width,
           WTNET = Model.WTNET
       })
        </th>
        <th>
            @Html.ActionLink("Width", "Index", new
       {
           Pages = ViewBag.Pages,
           sortOrder = ViewBag.WidthSortParm,
           Loc = Model.Loc,
           Type = Model.Type,
           Finish = Model.Finish,
           Gauge = Model.Gauge,
           Width = Model.Width,
           WTNET = Model.WTNET
       })
        </th>
        <th>
            @Html.ActionLink("WTNET", "Index", new
       {
           Pages = ViewBag.Pages,
           sortOrder = ViewBag.WTNETSortParm,
           Loc = Model.Loc,
           Type = Model.Type,
           Finish = Model.Finish,
           Gauge = Model.Gauge,
           Width = Model.Width,
           WTNET = Model.WTNET
       })
        </th>
        <th>
            @Html.ActionLink("NOOFPCS", "Index", new
       {
           Pages = ViewBag.Pages,
           sortOrder = ViewBag.NOOFPCSSortParm,
           Loc = Model.Loc,
           Type = Model.Type,
           Finish = Model.Finish,
           Gauge = Model.Gauge,
           Width = Model.Width,
           WTNET = Model.WTNET
       })
        </th>
        @if (User.Identity.IsAuthenticated)
        {
            <th>
                Request Quote
            </th>
        }
    </tr>

    @if (Model != null)
    {
        foreach (var item in Model.IPagedProductsList)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Loc)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Type)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Finish)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Gauge)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Width)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.WTNET)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.NOOFPCS)
                </td>

                @if (User.Identity.IsAuthenticated)
                {
                    <td>
                        <input type="button" value="Request quote" id="btnRequestQuote" onclick="if (confirm('Do you want to Request quote?')) { window.location.href = '@Url.Action("index", "Product", new { Id = item.Id })' }" />
                    </td>
                }

            </tr>
        }
    }

</table>
@if (Model != null)
{
    @Html.PagedListPager(Model.IPagedProductsList, page => Url.Action("Index", new
{
    page,
    Loc = Model.Loc,
    Type = Model.Type,
    Finish = Model.Finish,
    Gauge = Model.Gauge,
    Width = Model.Width,
    WTNET = Model.WTNET,
    Pages = Request.QueryString["Pages"],
    sortOrder = Request["sortOrder"]
}),
            new PagedListRenderOptions() { Display = PagedListDisplayMode.IfNeeded })

}

